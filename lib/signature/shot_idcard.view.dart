// üéØ Dart imports:
import 'dart:io' show File;
import 'dart:typed_data' show Uint8List;

// üê¶ Flutter imports:
import 'package:flutter/material.dart';

// üì¶ Package imports:
import 'package:get/route_manager.dart' show Get;
import 'package:get/get_navigation/src/extension_navigation.dart';
import 'package:image_picker/image_picker.dart';
import 'package:timeago/timeago.dart' as timeago;

// üåé Project imports:
import '../auth/auth.controller.dart';
import '../shared/shared.dart';
import '../vote/vote.controller.dart';
import 'signature.dart';

class UploadIdCardPage extends StatefulWidget {
  const UploadIdCardPage({Key? key}) : super(key: key);

  @override
  State<UploadIdCardPage> createState() => _UploadIdCardPageState();
}

class _UploadIdCardPageState extends State<UploadIdCardPage> {
  Uint8List? _idcardImage;
  String _username = '';
  String _informationString = '';
  final ImagePicker _picker = ImagePicker();

  final SignController _controller = SignController.get();
  final AuthController _authCtrl = AuthController.get();
  final VoteController _voteCtrl = VoteController.get();
  ImageSource _source = ImageSource.camera;

  void _onPressed() async {
    if (_authCtrl.canVote) {
      _username = _authCtrl.user.username;
    }
    await showDialog<ImageSource>(
      context: context,
      builder: (BuildContext context) {
        return SimpleDialog(
          elevation: 10,
          contentPadding: const EdgeInsets.symmetric(
            vertical: 20.0,
          ),
          title: CustomText(
            text: 'Ïã†Î∂ÑÏ¶ùÏùÑ Ï¥¨ÏòÅÌï¥Ï£ºÏÑ∏Ïöî.',
            typoType: TypoType.h2Bold,
          ),
          children: [
            SimpleDialogOption(
              onPressed: () {
                if (mounted) {
                  setState(() {
                    _source = ImageSource.camera;
                  });
                }
                Navigator.pop(context, _source);
              },
              child: CustomText(
                text: 'Ïπ¥Î©îÎùº Ï¥¨ÏòÅ',
                typoType: TypoType.bodyLight,
              ),
            ),
            SimpleDialogOption(
              onPressed: () {
                if (mounted) {
                  setState(() {
                    _source = ImageSource.gallery;
                  });
                }
                Navigator.pop(context, _source);
              },
              child: CustomText(
                text: 'Í∞§Îü¨Î¶¨ ÏÑ†ÌÉù',
                typoType: TypoType.bodyLight,
              ),
            ),
          ],
        );
      },
    );

    final XFile? xfile = await _picker.pickImage(
      maxWidth: 1900,
      maxHeight: 600,
      source: _source,
      preferredCameraDevice: CameraDevice.rear,
    );
    if (xfile != null) {
      _idcardImage = await File(xfile.path).readAsBytes();
      if (_idcardImage != null) {
        final String extension = xfile.name.split('.').last;
        final String imgUrl = await _controller.uploadSignature(
          _voteCtrl.campaign.enName,
          '$_username-${DateTime.now()}.$extension',
          _idcardImage!,
          'idcard',
        );
        _voteCtrl.putIdCard(imgUrl);
        setState(() {});
      }
    }
  }

  Widget _uploadImageButton() {
    return IconButton(
      onPressed: _onPressed,
      icon: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CustomText(text: 'Ï¥¨ÏòÅ Î∞è ÏóÖÎ°úÎìúÌïòÍ∏∞'),
          const SizedBox(
            height: 10,
          ),
          const Icon(
            Icons.upload_file_rounded,
            size: 50,
            color: Colors.deepOrange,
            semanticLabel: 'Ï¥¨ÏòÅ Î∞è ÏóÖÎ°úÎìú',
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    const String titleString = 'Ï†ÑÏûêÏÑúÎ™Ö';
    const String helpText = 'Ïã†Î∂ÑÏ¶ùÏùÑ Ï¥¨ÏòÅÌï¥Ï£ºÏÑ∏Ïöî';
    _informationString = _voteCtrl.voteAgenda.idCardAt != null
        ? '${timeago.format(_voteCtrl.voteAgenda.idCardAt!, locale: 'ko')}Ïóê Ïù¥ÎØ∏ ÏóÖÎ°úÎìúÌïòÏòÄÏäµÎãàÎã§. Ïû¨ ÏóÖÎ°úÎìúÌïòÏãúÎ†§Î©¥ Í∞ÄÏö¥Îç∞Î•º ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî.'
        : '''
Ïã†Î∂ÑÏ¶ù ÏÇ¨Î≥∏ÏùÄ ÏúÑÏûÑÏû• Î≥∏Ïù∏ÌôïÏù∏ Ï¶ùÎπô ÏûêÎ£åÎ°ú ÌôúÏö©Îê©ÎãàÎã§. 
Ï¥¨ÏòÅ Ïãú Ï£ºÎØºÎì±Î°ùÎ≤àÌò∏Ïùò Îí∑ÏûêÎ¶¨Î•º Í∞ÄÎ†§Ï£ºÏÑ∏Ïöî. 
Ïã†Î∂ÑÏ¶ù ÏõêÎ≥∏Ïùò ÎØºÍ∞êÌïú Í∞úÏù∏Ï†ïÎ≥¥Îäî Î≥¥Ïïà Í∏∞Ïà†Ïóê ÏùòÌï¥ ÏûêÎèôÏúºÎ°ú Î≥¥Ïù¥ÏßÄ ÏïäÍ≤å ÏÇ≠Ï†úÎê©ÎãàÎã§.''';
    Widget mainContent = Container(
      margin: const EdgeInsets.symmetric(vertical: 16),
      foregroundDecoration: BoxDecoration(
        border: Border.all(
          color: Colors.deepOrange,
          width: 2,
          style: BorderStyle.solid,
        ),
        borderRadius: BorderRadiusDirectional.circular(30),
      ),
      child: SizedBox(
        width: Get.width,
        height: 300,
        child: (_idcardImage != null
            ? GestureDetector(
                onLongPress: _onPressed,
                child: Image.memory(
                  _idcardImage!,
                  fit: BoxFit.contain,
                  alignment: Alignment.center,
                ),
              )
            : _uploadImageButton()),
      ),
    );

    Widget subContentList = Column(
      children: [
        CustomButton(
          label: 'Îì±Î°ù',
          onPressed: () {
            if (_idcardImage != null) {
              if (_authCtrl.user.backId.length > 1) {
                jumpToVoteResult();
              }
              goTakeIdNumber();
            }
          },
        ),
      ],
    );
    return AppBodyPage(
      titleString: titleString,
      helpText: helpText,
      informationString: _informationString,
      mainContent: mainContent,
      subContentList: subContentList,
    );
  }
}
